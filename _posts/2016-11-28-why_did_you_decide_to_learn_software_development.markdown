---
layout: post
title:  "Why did you decide to learn software development?"
date:   2016-11-28 04:10:17 +0000
---

So, a little backstory: My name is Keegan. I’m a 25 year old guy, arguably an adult, who has wanted to shift gears for a while.  I like to read, and I like to write. I like to sketch, poorly, and not show anyone. I like to whittle every once in a while, but the scars on my hands would scream otherwise, if they could. I like to build things, learn things, and explain things. I get excited by the small stuff, and I get even more excited when someone else does, too.

I’m a scientist. I have a B.S. in Chemistry. I went to Worcester Polytechnic Institute, which is a great engineering school in Massachusetts with a lot of really cool people. In high school, I had three loves: coding, robotics, and chemistry. I fooled around a lot in Python at home, I built and programmed robots (in a variant of C) for our robotics club, and I read chemistry textbooks for my A.P. class of the same. When I went to college, I wanted to pursue one of those tracks. I decided that I could always code or build as a hobby, but chemistry was one of those things that you really had to do in school to pursue. So, I chose chemistry, and I dove right into it.

At WPI, my forte was organic chemistry. Organic chemistry, especially synthetic organic, is a creative field. You make stuff, you try stuff, you tweak stuff, and you do it again and again until you get something good. Eventually, you might make something that cures a disease, or enhances a material, or changes the way humanity gets things done. Unfortunately, in reality, it’s less satisfying than it might sound. Nine times out of ten, the thing you are trying to do will fail. Then, that tenth time, you only know it has succeeded by analyzing it indirectly. There’s no instant feedback. There’s no quick fix. There’s no visibility, and there’s little flexibility. At the end of the day, or the week, or the month, you have most likely turned one white powder (or transparent liquid) into another white powder (or transparent liquid). And more often than not, you only know it is what you think it is because you are able to read a smattering of variously sized and spaced lines on a page that a giant magnet has spat out at you. It can be very rewarding with lots of dedication and hard work, but it’s an enormous pain to get there.

Chemistry is beautiful, in it’s own way, but so is coding. When you program something, you see what you’re putting in. You get quick feedback a lot of the time. It worked, or it didn’t. It’s easy to see, or it’s hard to see. But even if a bug is hard to see, it’s not as opaque as it is in a chemistry lab. You’re not completely in the dark… you’re staring at logic incarnate on a screen in front of you, and you’re trying to guide its life. Organic chemistry, when it’s on a blackboard, is similar. A series of compounds and reactions will branch and build on one another, in a very intricate way, to create what you want. There are techniques and algorithms to make that happen more efficiently or more quickly, and those blackboard reactions are easily “debugged”. In real life, however, that dynamic nearly disappears.

Up until very recently, I have been a very *amateur* coder. I’ve always been interested, but never been a programming powerhouse. I’ve been a Linux user since I was fifteen, but I remain a novice (and suspect I always will!). I’ve been a Python evangelist since around the same time, but I’m even more a novice there. I’ve done online courses at Codecademy, watched tutorial videos, and worked on tiny hobby projects. I’ve messed with an Axon II MCU for a half-baked robotics project at home, and I’ve screwed around with a Raspberry Pi. I built a couple web-scraping applications in Python for my boss, when I had my job as an analytical chemist for a small pharmaceutical company earlier this year, but he didn’t really care to look at them, no matter how much I tried to convince him they’d save him time. I’ve set up a small website with an Apache server on a DigitalOcean VPS to try my hand at HTML, CSS, and basic client-side JavaScript. I built a tiny Socket.io app, too, to experiment with Node.js. It’s pretty unexciting and unoriginal, but it was fun to make!

So, I didn’t want to be an amateur coder anymore. I wanted to be a professional developer. I got tired of treating my passion as a hobby. I decided six months ago that I would gear up for a switch, so I started getting back into coding. And a few months ago, I got laid off. That was a surprise, and very painful. But you can imagine the sound of a starting pistol going off in my head, can’t you?

For about a month after, I’d been working myself to the bone trying to learn as much as I can, and I think I did a good job. But there’s only so much you can do alone, at home, with no close friends who are in the field to help, and no mentors to turn to. I needed structure. I definitely needed help. So I ended up enrolling in Flatiron School’s online program, Learn.co, and now I'm on my way to being a professional web developer.

If that sounded a bit preachy, it's because it absolutely is. And if it sounds like an advertisement, it's because it's almost exactly what I put in my application. But it's true.

I love to code. I love computers, technology, the internet, you name it. And I love writing, building, experimenting, tinkering, and breaking things. I don’t want to learn web development because I need a new job and I think this is some “get rich quick” scheme. This is about finally pursuing a passion. It's about creating from scratch, constant change, and self-direction, and it's about giving something to the world, made by ME.

Whew. I feel winded. Hold the phone, I'm gonna grab a glass of water.
